Begin DFS from node A.
Visit node A and mark it as visited.
Explore adjacent nodes of A: C, B, D.
Visit node C (recursive call to DFS).
Visit node C and mark it as visited.
Explore adjacent nodes of C: A, B, D.
Node A is already visited, skip.
Visit node B.
Visit node B and mark it as visited.
Explore adjacent nodes of B: A, C, E, G.
Node A is already visited, skip.
Node C is already visited, skip.
Visit node E .
Visit node E and mark it as visited.
Explore adjacent nodes of E: G, F, B.
Node G is already visited, skip.
Visit node F.
Visit node F and mark it as visited.
Explore adjacent nodes of F: G, E.
Node G is already visited, skip.
Node E is already visited, skip.
End of DFS for node F.
End of DFS for node E.
Node G is already visited, skip.
End of DFS for node B.
Node D is already visited, skip.
End of DFS for node C.
Node B is already visited, skip.
Node D is already visited, skip.
End of DFS traversal.  Answer:A, C, B, E, G, F, D.

Provide the detailed trace of the depth-first search (Refer to the book by Sedgewick and Wayne,
Algorithms 4th edition, page 537)

Start DFS from vertex 0.
Visit vertex 0, mark it as visited. EdgeTo[] = [null, null, null, null, null, null, null]
Visit adjacent vertices of vertex 0: 2, 1, 3.
Visit vertex 2, mark edge from 0 to 2. EdgeTo[] = [null, null, 0, null, null, null, null]
Visit vertex 1, mark edge from 0 to 1. EdgeTo[] = [null, 0, 0, null, null, null, null]
Visit vertex 3.
Continue DFS from vertex 2.
Visit adjacent vertices of vertex 2: 0, 1, 3.
Visit vertex 0.
Visit vertex 1.
Visit vertex 3.
Continue DFS from vertex 1.
Visit adjacent vertices of vertex 1: 0, 2, 3, 5.
Visit vertex 0.
Visit vertex 2.
Visit vertex 3.
Visit vertex 5, mark edge from 0 to 5. EdgeTo[] = [null, null, 0, null, null, 0, null]
Continue DFS from vertex 3.
Visit adjacent vertices of vertex 3: 0, 2, 4, 5.
Visit vertex 0.
Visit vertex 2.
Visit vertex 4, mark edge from 3 to 4. EdgeTo[] = [null, null, 0, null, 3, 0, null]
Visit vertex 5.
End of DFS traversal. Answer: 0 2 1 4 6 5 3